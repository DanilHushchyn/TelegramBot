from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, URLInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callbacks.main_callbacks import CoordinateCallbackFactory, GalleryCallbackFactory
from keyboards.main import get_main_kb
from middlewares.auth import AuthMiddleware
import handlers.authorization as auth
from swipe_api.requests import UserAPIClient
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __

router = Router()
router.message.middleware(AuthMiddleware())


async def cmd_start(message: types.Message):
    await message.answer(_("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: "), reply_markup=get_main_kb())


@router.message(F.text == __('üö™ –í—ã—Ö–æ–¥'))
async def logout_handler(message: types.Message, state: FSMContext):
    print('hello')
    client = UserAPIClient(user_id=message.chat.id)
    await client.logout()
    await state.clear()
    await auth.authorization_handler(message=message, state=state)


@router.message(F.text == __('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
async def my_profile(message: Message, state: FSMContext):
    client = UserAPIClient(user_id=message.chat.id)
    resp = await client.get_profile()
    if resp is None:
        await message.answer(text=_('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏'))
        await logout_handler(message=message, state=state)
        return
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text=_("üìë –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"),
        callback_data="my_announcements")
    )
    image_from_url = URLInputFile("https://telegra.ph/file/f89b0997cb09eda64bddd.png")
    await message.answer_photo(
        image_from_url,
        caption=
        _("<b>–ú–æ–π –ê–∫–∫–∞—É–Ω—Ç:</b>\n"
          "<b>–§–∞–º–∏–ª–∏—è:</b> {surname}\n"
          "<b>–ò–º—è:</b> {name}\n"
          "<b>Email:</b> {email}\n"
          "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
          "üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≥–µ–Ω—Ç–∞</b> \n"
          "–§–∞–º–∏–ª–∏—è: {agent_surname}\n"
          "–ò–º—è: {agent_name}\n"
          "Email: {agent_email}\n"
          "–¢–µ–ª–µ—Ñ–æ–Ω: {agent_phone}\n"
          ).format(
            surname=resp['last_name'],
            name=resp['first_name'],
            email=resp['email'],
            phone=resp['phone'],
            agent_surname=resp['agent_contacts']['last_name'],
            agent_name=resp['agent_contacts']['first_name'],
            agent_email=resp['agent_contacts']['email'],
            agent_phone=resp['agent_contacts']['phone'],
        ),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "my_announcements")
async def my_announcements(callback: types.CallbackQuery, state: FSMContext):
    client = UserAPIClient(user_id=callback.message.chat.id)
    resp = await client.get_my_announcements()
    if resp is None:
        await callback.message.answer(text=_('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏'))
        await logout_handler(message=callback.message, state=state)
        return

    for item in resp:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text=_("–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"),
            callback_data=CoordinateCallbackFactory(longtitude=float(item['map_lon']),
                                                    latitude=float(item['map_lat'])).pack()
        ))
        builder.add(types.InlineKeyboardButton(
            text=_("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é"),
            callback_data=GalleryCallbackFactory(id=item['id']).pack()
        ))

        await callback.message.answer_photo(
            URLInputFile(client.url + item['main_photo']),
            caption=
            _("<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
              "<b>–ê–∫—Ç—É–∞–ª—å–Ω–æ:</b> {actual}\n"
              "<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {moderation}\n"
              "<b>–°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {moderation_status}\n"
              "<b>–î–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è:</b> {grounds_doc}\n"
              "<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {appointment}\n"
              "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:</b> {room_count}\n"
              "<b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞:</b> {layout}\n"
              "<b>–ñ–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {living_condition}\n"
              "<b>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</b> {square}\n"
              "<b>–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏:</b> {kitchen_square}\n"
              "<b>–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è:</b> {balcony_or_loggia}\n"
              "<b>–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è:</b> {heating_type}\n"
              "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b> {payment_type}\n"
              "<b>–ö–æ–º–º–∏—Å–∏—è –∞–≥–µ–Ω—Ç—É:</b> {agent_commission}\n"
              "<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> {communication_type}\n"
              "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
              "<b>–¶–µ–Ω–∞:</b> {price}\n"
              ).format(
                address=item['address'],
                actual='–î–ê' if item['is_actual'] else '–ù–ï–¢',
                moderation='–ü—Ä–æ–π–¥–µ–Ω–∞' if item['is_moderated'] else '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
                moderation_status=item['moderation_status'] if item['moderation_status'] else '...',
                grounds_doc=item['grounds_doc'],
                appointment=item['appointment'],
                room_count=item['room_count'],
                layout=item['layout'],
                living_condition=item['living_condition'],
                square=item['square'],
                kitchen_square=item['kitchen_square'],
                balcony_or_loggia='–î–ê' if item['balcony_or_loggia'] else '–ù–ï–¢',
                heating_type=item['heating_type'],
                payment_type=item['payment_type'],
                agent_commission=item['agent_commission'],
                communication_type=item['communication_type'],
                description=item['description'],
                price=item['price'],
            ),
            parse_mode="HTML",
            reply_markup=builder.as_markup()

        )


@router.callback_query(CoordinateCallbackFactory.filter())
async def get_location(callback: types.CallbackQuery, callback_data: CoordinateCallbackFactory):
    # Obtenez les coordonn√©es de longitude et de latitude
    # Utilisez la m√©thode sendLocation pour envoyer la g√©olocalisation
    await callback.bot.send_location(chat_id=callback.message.chat.id, latitude=callback_data.latitude,
                                     longitude=callback_data.longtitude)
    await callback.answer(
        text="",
    )


@router.callback_query(GalleryCallbackFactory.filter())
async def show_gallery(callback: types.CallbackQuery, callback_data: CoordinateCallbackFactory, state: FSMContext):
    client = UserAPIClient(user_id=callback.message.chat.id)
    resp = await client.get_gallery_for_announcements(callback_data.id)
    if resp is None:
        await callback.message.answer(text=_('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏'))
        await logout_handler(message=callback.message, state=state)
        return
    gallery = []
    for item in resp['images']:
        gallery.append(URLInputFile(
            item['image']
        ))
    media = [types.InputMediaPhoto(media=photo) for photo in gallery]
    await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=media)
    await callback.answer(
        text="",
    )
