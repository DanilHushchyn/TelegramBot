import httpx
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, URLInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callbacks.main_callbacks import CoordinateCallbackFactory, GalleryCallbackFactory
from keyboards.main import get_main_kb

router = Router()


async def cmd_start(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=get_main_kb())




@router.message(F.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: Message):
    resp = httpx.post('http://127.0.0.0:8000/api/v1/auth/login/', data={
        "email": "badegox807@tipent.com",
        "password": "sword123"
    })
    headers = {
        "Authorization": f"Bearer {resp.json()['access']}"
    }
    resp = httpx.get('http://127.0.0.0:8000/api/v1/auth/profiles/my_profile/', headers=headers)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìë –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        callback_data="my_announcements")
    )
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    await message.answer_photo(
        image_from_url,
        caption=
        f"<b>–ú–æ–π –ê–∫–∫–∞—É–Ω—Ç:</b>\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {resp.json()['last_name']}\n"
        f"<b>–ò–º—è:</b> {resp.json()['first_name']}\n"
        f"<b>Email:</b> {resp.json()['email']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {resp.json()['phone']}\n\n"
        f"üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≥–µ–Ω—Ç–∞</b> \n"
        f"–§–∞–º–∏–ª–∏—è: {resp.json()['agent_contacts']['last_name']}\n"
        f"–ò–º—è: {resp.json()['agent_contacts']['first_name']}\n"
        f"Email: {resp.json()['agent_contacts']['email']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {resp.json()['agent_contacts']['phone']}\n",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "my_announcements")
async def my_announcements(callback: types.CallbackQuery):
    resp = httpx.post('http://127.0.0.0:8000/api/v1/auth/login/', data={
        "email": "badegox807@tipent.com",
        "password": "sword123"
    })
    headers = {
        "Authorization": f"Bearer {resp.json()['access']}"
    }
    resp = httpx.get('http://127.0.0.0:8000/api/v1/client/announcements/my_announcements/', headers=headers)
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    for item in resp.json():
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
            callback_data=CoordinateCallbackFactory(longtitude=float(item['map_lon']),
                                                    latitude=float(item['map_lat'])).pack()
        ))
        builder.add(types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é",
            callback_data=GalleryCallbackFactory(id=item['id']).pack()
        ))

        await callback.message.answer_photo(
            image_from_url,
            caption=
            f"<b>–ê–¥—Ä–µ—Å:</b> {item['description']}\n"
            f"<b>–ê–∫—Ç—É–∞–ª—å–Ω–æ:</b> {'–î–ê' if item['is_actual'] else '–ù–ï–¢'}\n"
            f"<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {'–ü—Ä–æ–π–¥–µ–Ω–∞' if item['is_moderated'] else '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}\n"
            f"<b>–°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {item['moderation_status'] if item['moderation_status'] else '...'}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è:</b> {item['grounds_doc']}\n"
            f"<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {item['appointment']}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:</b> {item['room_count']}\n"
            f"<b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞:</b> {item['layout']}\n"
            f"<b>–ñ–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {item['living_condition']}\n"
            f"<b>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</b> {item['square']}\n"
            f"<b>–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏:</b> {item['kitchen_square']}\n"
            f"<b>–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è:</b> {item['balcony_or_loggia']}\n"
            f"<b>–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è:</b> {item['heating_type']}\n"
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b> {item['payment_type']}\n"
            f"<b>–ö–æ–º–º–∏—Å–∏—è –∞–≥–µ–Ω—Ç—É:</b> {item['agent_commission']}\n"
            f"<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> {item['communication_type']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item['description']}\n"
            f"<b>–¶–µ–Ω–∞:</b> {item['price']}\n",
            parse_mode="HTML",
            reply_markup=builder.as_markup()

        )

        # Send the media group
        # await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=media)


@router.callback_query(CoordinateCallbackFactory.filter())
async def get_location(callback: types.CallbackQuery, callback_data: CoordinateCallbackFactory):
    # Obtenez les coordonn√©es de longitude et de latitude
    # Utilisez la m√©thode sendLocation pour envoyer la g√©olocalisation
    await callback.bot.send_location(chat_id=callback.message.chat.id, latitude=callback_data.latitude,
                                     longitude=callback_data.longtitude)
    await callback.answer(
        text="",
    )


@router.callback_query(GalleryCallbackFactory.filter())
async def show_gallery(callback: types.CallbackQuery, callback_data: CoordinateCallbackFactory):
    print(callback_data.id)  # –ü–æ id –∑–∞–ø—Ä–æ—Å–∏—à—å –æ–±—ä–≤–ª–µ–Ω–∏–µ –∏ –≤—ã—Ç–∞—â–∏—à—å —Ç—É—Ç –≥–∞–ª–µ—Ä–µ—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    gallery = [
        "https://picsum.photos/seed/groosha/400/300",
        "https://picsum.photos/seed/groosha/400/300",
        "https://picsum.photos/seed/groosha/400/300",
    ]

    # Create a list of InputMediaPhoto objects
    media = [types.InputMediaPhoto(media=photo) for photo in gallery]
    await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=media)
    await callback.answer(
        text="",
    )
