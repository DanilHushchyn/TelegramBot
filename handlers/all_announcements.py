import httpx
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, URLInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from callbacks.main_callbacks import CoordinateCallbackFactory, GalleryCallbackFactory
from keyboards.main import get_main_kb
from keyboards.pagination import get_pagination_keyboard
from test_lessons import dp

router = Router()  # [1]


@router.message(F.text == 'üóÇ –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
async def all_announcements(message: Message, page_num=0):
    resp = httpx.post('http://127.0.0.0:8000/api/v1/auth/login/', data={
        "email": "badegox807@tipent.com",
        "password": "sword123"
    })
    headers = {
        "Authorization": f"Bearer {resp.json()['access']}"
    }
    resp = httpx.get('http://127.0.0.0:8000/api/v1/client/announcements/', headers=headers)
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    if page_num + 1 > len(resp.json()):
        page_num = 0
    elif page_num + 1 <= 0:
        page_num = len(resp.json()) - 1
    item = resp.json()[page_num]

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚Üê",
        callback_data=f"previous_{page_num - 1}")
    )
    builder.add(types.InlineKeyboardButton(
        text=f"{page_num + 1}/{len(resp.json())}",
        callback_data="page_button")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚Üí",
        callback_data=f"next_{page_num + 1}")
    )

    builder.row(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
        callback_data=CoordinateCallbackFactory(longtitude=float(item['map_lon']),
                                                latitude=float(item['map_lat'])).pack()
    ),
        types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é",
            callback_data=GalleryCallbackFactory(id=item['id']).pack()
        )
    )

    await message.answer_photo(
        image_from_url,
        caption=
        f"<b>–ê–¥—Ä–µ—Å:</b> {item['description']}\n"
        f"<b>–ê–∫—Ç—É–∞–ª—å–Ω–æ:</b> {'–î–ê' if item['is_actual'] else '–ù–ï–¢'}\n"
        f"<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {'–ü—Ä–æ–π–¥–µ–Ω–∞' if item['is_moderated'] else '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {item['moderation_status'] if item['moderation_status'] else '...'}\n"
        f"<b>–î–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è:</b> {item['grounds_doc']}\n"
        f"<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {item['appointment']}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:</b> {item['room_count']}\n"
        f"<b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞:</b> {item['layout']}\n"
        f"<b>–ñ–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {item['living_condition']}\n"
        f"<b>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</b> {item['square']}\n"
        f"<b>–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏:</b> {item['kitchen_square']}\n"
        f"<b>–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è:</b> {item['balcony_or_loggia']}\n"
        f"<b>–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è:</b> {item['heating_type']}\n"
        f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b> {item['payment_type']}\n"
        f"<b>–ö–æ–º–º–∏—Å–∏—è –∞–≥–µ–Ω—Ç—É:</b> {item['agent_commission']}\n"
        f"<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> {item['communication_type']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item['description']}\n"
        f"<b>–¶–µ–Ω–∞:</b> {item['price']}\n",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)

    )


@router.callback_query(F.data.startswith("next_"))
async def callbacks_num(callback: types.CallbackQuery):
    number = callback.data.split('_')[1]
    await all_announcements(callback.message, int(number))
    await callback.answer()


@router.callback_query(F.data.startswith("previous_"))
async def callbacks_num(callback: types.CallbackQuery):
    number = callback.data.split('_')[1]
    await all_announcements(callback.message, int(number))
    await callback.answer()
