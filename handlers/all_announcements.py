from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, URLInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from callbacks.main_callbacks import CoordinateCallbackFactory, GalleryCallbackFactory
import handlers.main_menu as main_menu
from middlewares.auth import AuthMiddleware
import swipe_api.requests as swipe_api
from aiogram.utils.i18n import lazy_gettext as __
from aiogram.utils.i18n import gettext as _

router = Router()  # [1]
router.message.middleware(AuthMiddleware())


@router.message(F.text == __('üóÇ –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π'))
async def all_announcements(message: Message, state: FSMContext, page_num=0):
    client = swipe_api.UserAPIClient(user_id=message.chat.id)
    resp = await client.get_all_announcements()
    if resp is None:
        await message.answer(text=_('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏'))
        await main_menu.logout_handler(message=message, state=state)
        return
    if page_num + 1 > len(resp):
        page_num = 0
    elif page_num + 1 <= 0:
        page_num = len(resp) - 1
    item = resp[page_num]

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚Üê",
        callback_data=f"previous_{page_num - 1}")
    )
    builder.add(types.InlineKeyboardButton(
        text=f"{page_num + 1}/{len(resp)}",
        callback_data="page_button")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚Üí",
        callback_data=f"next_{page_num + 1}")
    )

    builder.row(types.InlineKeyboardButton(
        text=_("–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"),
        callback_data=CoordinateCallbackFactory(longtitude=float(item['map_lon']),
                                                latitude=float(item['map_lat'])).pack()
    ),
        types.InlineKeyboardButton(
            text=_("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é"),
            callback_data=GalleryCallbackFactory(id=item['id']).pack()
        )
    )

    await message.answer_photo(
        URLInputFile(item['main_photo']),
        caption=
        _("<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
          "<b>–ê–∫—Ç—É–∞–ª—å–Ω–æ:</b> {actual}\n"
          "<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {moderation}\n"
          "<b>–°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {moderation_status}\n"
          "<b>–î–æ–∫—É–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è:</b> {grounds_doc}\n"
          "<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {appointment}\n"
          "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:</b> {room_count}\n"
          "<b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞:</b> {layout}\n"
          "<b>–ñ–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {living_condition}\n"
          "<b>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</b> {square}\n"
          "<b>–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏:</b> {kitchen_square}\n"
          "<b>–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è:</b> {balcony_or_loggia}\n"
          "<b>–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è:</b> {heating_type}\n"
          "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b> {payment_type}\n"
          "<b>–ö–æ–º–º–∏—Å–∏—è –∞–≥–µ–Ω—Ç—É:</b> {agent_commission}\n"
          "<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> {communication_type}\n"
          "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
          "<b>–¶–µ–Ω–∞:</b> {price}\n"
          ).format(
            address=item['address'],
            actual='–î–ê' if item['is_actual'] else '–ù–ï–¢',
            moderation='–ü—Ä–æ–π–¥–µ–Ω–∞' if item['is_moderated'] else '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
            moderation_status=item['moderation_status'] if item['moderation_status'] else '...',
            grounds_doc=item['grounds_doc'],
            appointment=item['appointment'],
            room_count=item['room_count'],
            layout=item['layout'],
            living_condition=item['living_condition'],
            square=item['square'],
            kitchen_square=item['kitchen_square'],
            balcony_or_loggia='–î–ê' if item['balcony_or_loggia'] else '–ù–ï–¢',
            heating_type=item['heating_type'],
            payment_type=item['payment_type'],
            agent_commission=item['agent_commission'],
            communication_type=item['communication_type'],
            description=item['description'],
            price=item['price'],
        ),
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)

    )


@router.callback_query(F.data.startswith("next_"))
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    number = callback.data.split('_')[1]
    await all_announcements(callback.message, state, int(number))
    await callback.answer()


@router.callback_query(F.data.startswith("previous_"))
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    number = callback.data.split('_')[1]
    await all_announcements(callback.message, state, int(number))
    await callback.answer()
